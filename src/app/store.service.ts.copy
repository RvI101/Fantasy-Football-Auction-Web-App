import { Injectable } from '@angular/core';
import { AngularFireDatabase, AngularFireAction, AngularFireList } from '@angular/fire/database';
import { Observable, BehaviorSubject, Subject } from 'rxjs';
import { switchMap, map, mergeMap, take } from 'rxjs/operators';
import { AngularFireAuth } from '@angular/fire/auth';
import { PlayerService } from './players.service';
import { LeagueFactoryService } from './league-factory.service';
import { League } from './models/league';
import { Player } from './models/player';

@Injectable({
  providedIn: 'root'
})
export class StoreService {
  leaguesRef: AngularFireList<any>;
  uid: string;
  dirtyUserLeagueEntries$: Subject<any|null>;
  userLeagueKeys$: Observable<AngularFireAction<firebase.database.DataSnapshot>[]>;

  constructor(private db: AngularFireDatabase, private afAuth: AngularFireAuth,
              private playerService: PlayerService, private leagueFactory: LeagueFactoryService) {
    this.uid = afAuth.auth.currentUser.uid;
    this.leaguesRef = db.list('leagues');
    this.dirtyUserLeagueEntries$ = new Subject();
    // Delete dirty user league entries
    this.dirtyUserLeagueEntries$.subscribe(blob => {
      console.log(blob);
      const [uid, leagueIdToDelete] = blob;
      db.list(`users/${uid}/leagues`, ref => ref.orderByChild('leagueId').equalTo(leagueIdToDelete)).remove();
    });

    db.list(`users/${this.uid}/leagues`).snapshotChanges()
      .pipe(map(changes => changes
        .map(c => ({ key: c.payload.key, ...c.payload.val()}))));

    this.leaguesRef.stateChanges(['child_removed'])
    .subscribe(action => {
      console.log(action);
      const adminKey = action.payload.val().adminKey;
      const aid = action.payload.val().admin;
      this.db.list(`users/${aid}/admin`).remove(adminKey);
      const members = action.payload.val().members;
      console.log(members);
      const lid = action.payload.val().leagueId;
      for (const key of Object.keys(members)) {
        const member = members[key];
        const tup = [member, lid];
        this.dirtyUserLeagueEntries$.next(tup);
        console.log(tup);
      }
    });
  }

  getLeague(leagueId: string): Observable<any> {
    return this.db.list(`leagues`, ref => ref.orderByKey().equalTo(leagueId)).valueChanges();
  }

  createLeague(uid: string, name: string): string {
    const newLeague: League = this.leagueFactory.getNewLeague();
    newLeague.setAdmin(uid);
    newLeague.name = name;
    const id = this.leaguesRef.push(newLeague).key;
    // this.leaguesRef.update(id, {leagueId: id});
    const adminKey = this.db.list(`users/${this.uid}/admin`).push({ leagueId: id, name }).key;
    this.leaguesRef.update(id, {adminKey, leagueId: id});

    const uLeagueKey = this.db.list(`users/${this.uid}/leagues`).push({ leagueId: id, name }).key;
    this.db.list(`users/${this.uid}/leagues`).update(uLeagueKey, {key: uLeagueKey});
    return id;
  }

  deleteLeague(leagueId: string): void {
    console.log('deleting' + leagueId);
    this.leaguesRef.remove(leagueId);
  }

  joinLeague(leagueId: string) {
    this.db.list(`leagues/${leagueId}/members`).push(this.uid);
    const uLeagueKey = this.db.list(`users/${this.uid}/leagues`).push({ leagueId, name }).key;
    this.db.list(`users/${this.uid}/leagues`).update(uLeagueKey, {key: uLeagueKey});
    this.getLeague(leagueId).pipe(map(leagues => leagues[0].name))
      .subscribe(name =>
        this.db.list(`users/${this.uid}/leagues`).update(uLeagueKey, {name}));
  }
  getAdminLeagues(): Observable<any> {
    return this.db.list(`users/${this.uid}/admin`).valueChanges();
  }

  getMemberLeagues(): Observable<any> {
    return this.db.list(`users/${this.uid}/leagues`).valueChanges();
  }

  isMember(leagueId: string): boolean {
    let flag = false;
    this.db.list(`users/${this.uid}/leagues`, ref => ref.orderByChild('leagueId').equalTo(leagueId))
      .valueChanges()
      .pipe(
        take(1)
      )
      .subscribe(d => flag = d ? true : false);
    return flag;
  }

  getPlayers(leagueId: string): Observable<Player> {
    return this.db.list(`leagues/${leagueId}/players`)
      .valueChanges()
      .pipe(
        take(1),
        mergeMap(val => val), // Flattens the array
        map((player: Player) => new Player(player))
      );
  }

  markTentativeBid(leagueId: string, bid: any): void {
    this.db.list(`users/${this.uid}/leagues`, ref => ref.orderByChild('leagueId').equalTo(leagueId).limitToFirst(1))
      .query.ref.child('tentativeBids').push(bid);
  }

  // getTentativeBids(leagueId: string): Observable<any> {
  //   return this.db.list(`users/${this.uid}/leagues`, ref => ref.orderByChild('leagueId').equalTo(leagueId))
  //     .query.ref.child('tentativeBids').on()
  // }
}
